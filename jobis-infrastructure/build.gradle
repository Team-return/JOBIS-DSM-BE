plugins {
    id "org.springframework.boot" version "3.1.6"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

dependencies {

    implementation(project(":jobis-application"))

    // migration
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    //persistence
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //queryDSL
    implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor(
            "jakarta.persistence:jakarta.persistence-api",
            "jakarta.annotation:jakarta.annotation-api",
            "com.querydsl:querydsl-apt:5.0.0:jpa")

    //web
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'
    implementation "io.github.openfeign:feign-httpclient:11.9.1"

    //aws
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.144'

    //thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    //config
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // slack
    implementation 'net.gpedro.integrations.slack:slack-webhook:1.4.0'

    // jaxb
    implementation 'javax.xml.bind:jaxb-api:2.3.0'

    // cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    //excel
    implementation 'org.apache.poi:poi:5.2.5'
    implementation 'org.apache.poi:poi-ooxml:5.2.5'

    // rabbitmq
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
}
def generatedResourcesDir = "$buildDir/generated-resources/main"

task generateSpyProperties {
    def outputFile = file("$generatedResourcesDir/spy.properties")

    outputs.file(outputFile)

    doLast {
        def content = '''
modulelist=log4j
logMessageFormat=com.p6spy.engine.spy.appender.SingleLineFormat
appender=com.p6spy.engine.spy.appender.Slf4JLogger
logLevel=info
'''.trim()

        outputFile.parentFile.mkdirs()
        outputFile.text = content
    }
}

sourceSets {
    main {
        resources {
            // 여기가 중요! 디렉토리만 등록
            srcDir generatedResourcesDir
        }
    }
}

compileJava.dependsOn(generateSpyProperties)

jar.enabled = false
